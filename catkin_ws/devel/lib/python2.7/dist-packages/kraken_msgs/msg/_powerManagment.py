# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kraken_msgs/powerManagment.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class powerManagment(genpy.Message):
  _md5sum = "1b2cc70fbfd70edc8a02a4b7323fe6d4"
  _type = "kraken_msgs/powerManagment"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float32 bat1_vol
float32 bat2_vol
float32 bat1_percent_left
float32 bat2_percent_left
float32 bat1_current
float32 bat2_cuurent
float32[6] thruster_current
float32 killSwitch_state
float32 missionSwitch_state
float32 dvl_current
float32 imu_current
float32 depth_sensor_current 
float32 safety_signal

 



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','bat1_vol','bat2_vol','bat1_percent_left','bat2_percent_left','bat1_current','bat2_cuurent','thruster_current','killSwitch_state','missionSwitch_state','dvl_current','imu_current','depth_sensor_current','safety_signal']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32[6]','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,bat1_vol,bat2_vol,bat1_percent_left,bat2_percent_left,bat1_current,bat2_cuurent,thruster_current,killSwitch_state,missionSwitch_state,dvl_current,imu_current,depth_sensor_current,safety_signal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(powerManagment, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bat1_vol is None:
        self.bat1_vol = 0.
      if self.bat2_vol is None:
        self.bat2_vol = 0.
      if self.bat1_percent_left is None:
        self.bat1_percent_left = 0.
      if self.bat2_percent_left is None:
        self.bat2_percent_left = 0.
      if self.bat1_current is None:
        self.bat1_current = 0.
      if self.bat2_cuurent is None:
        self.bat2_cuurent = 0.
      if self.thruster_current is None:
        self.thruster_current = [0.,0.,0.,0.,0.,0.]
      if self.killSwitch_state is None:
        self.killSwitch_state = 0.
      if self.missionSwitch_state is None:
        self.missionSwitch_state = 0.
      if self.dvl_current is None:
        self.dvl_current = 0.
      if self.imu_current is None:
        self.imu_current = 0.
      if self.depth_sensor_current is None:
        self.depth_sensor_current = 0.
      if self.safety_signal is None:
        self.safety_signal = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.bat1_vol = 0.
      self.bat2_vol = 0.
      self.bat1_percent_left = 0.
      self.bat2_percent_left = 0.
      self.bat1_current = 0.
      self.bat2_cuurent = 0.
      self.thruster_current = [0.,0.,0.,0.,0.,0.]
      self.killSwitch_state = 0.
      self.missionSwitch_state = 0.
      self.dvl_current = 0.
      self.imu_current = 0.
      self.depth_sensor_current = 0.
      self.safety_signal = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6f.pack(_x.bat1_vol, _x.bat2_vol, _x.bat1_percent_left, _x.bat2_percent_left, _x.bat1_current, _x.bat2_cuurent))
      buff.write(_struct_6f.pack(*self.thruster_current))
      _x = self
      buff.write(_struct_6f.pack(_x.killSwitch_state, _x.missionSwitch_state, _x.dvl_current, _x.imu_current, _x.depth_sensor_current, _x.safety_signal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.bat1_vol, _x.bat2_vol, _x.bat1_percent_left, _x.bat2_percent_left, _x.bat1_current, _x.bat2_cuurent,) = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.thruster_current = _struct_6f.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.killSwitch_state, _x.missionSwitch_state, _x.dvl_current, _x.imu_current, _x.depth_sensor_current, _x.safety_signal,) = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6f.pack(_x.bat1_vol, _x.bat2_vol, _x.bat1_percent_left, _x.bat2_percent_left, _x.bat1_current, _x.bat2_cuurent))
      buff.write(self.thruster_current.tostring())
      _x = self
      buff.write(_struct_6f.pack(_x.killSwitch_state, _x.missionSwitch_state, _x.dvl_current, _x.imu_current, _x.depth_sensor_current, _x.safety_signal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.bat1_vol, _x.bat2_vol, _x.bat1_percent_left, _x.bat2_percent_left, _x.bat1_current, _x.bat2_cuurent,) = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.thruster_current = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      _x = self
      start = end
      end += 24
      (_x.killSwitch_state, _x.missionSwitch_state, _x.dvl_current, _x.imu_current, _x.depth_sensor_current, _x.safety_signal,) = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_6f = struct.Struct("<6f")
