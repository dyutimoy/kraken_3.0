;; Auto-generated. Do not edit!


(when (boundp 'kraken_msgs::setYawFeedback)
  (if (not (find-package "KRAKEN_MSGS"))
    (make-package "KRAKEN_MSGS"))
  (shadow 'setYawFeedback (find-package "KRAKEN_MSGS")))
(unless (find-package "KRAKEN_MSGS::SETYAWFEEDBACK")
  (make-package "KRAKEN_MSGS::SETYAWFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude setYawFeedback.msg.html
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass kraken_msgs::setYawFeedback
  :super ros::object
  :slots (_header _Desired_yaw _Current_yaw _Error ))

(defmethod kraken_msgs::setYawFeedback
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:Desired_yaw __Desired_yaw) 0.0)
    ((:Current_yaw __Current_yaw) 0.0)
    ((:Error __Error) 0.0)
    )
   (send-super :init)
   (setq _header __header)
   (setq _Desired_yaw (float __Desired_yaw))
   (setq _Current_yaw (float __Current_yaw))
   (setq _Error (float __Error))
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:Desired_yaw
   (&optional __Desired_yaw)
   (if __Desired_yaw (setq _Desired_yaw __Desired_yaw)) _Desired_yaw)
  (:Current_yaw
   (&optional __Current_yaw)
   (if __Current_yaw (setq _Current_yaw __Current_yaw)) _Current_yaw)
  (:Error
   (&optional __Error)
   (if __Error (setq _Error __Error)) _Error)
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; float32 _Desired_yaw
    4
    ;; float32 _Current_yaw
    4
    ;; float32 _Error
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; float32 _Desired_yaw
       (sys::poke _Desired_yaw (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _Current_yaw
       (sys::poke _Current_yaw (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _Error
       (sys::poke _Error (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; float32 _Desired_yaw
     (setq _Desired_yaw (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _Current_yaw
     (setq _Current_yaw (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _Error
     (setq _Error (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get kraken_msgs::setYawFeedback :md5sum-) "7118c515219415471afc64514800b41f")
(setf (get kraken_msgs::setYawFeedback :datatype-) "kraken_msgs/setYawFeedback")
(setf (get kraken_msgs::setYawFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback
Header header
float32 Desired_yaw
float32 Current_yaw
float32 Error


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

")



(provide :kraken_msgs/setYawFeedback "7118c515219415471afc64514800b41f")


